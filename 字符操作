//stirng 函数库

   //大小写
   s[i]=tolower(s[i));
   s[i]=toupper(s[i]);
   //是否为字母
   isalpha(s[i]);
   //字符串转int
   stoi(s.substr(pos,len));
   //int转string
   to_string
   pos起始位置，len长度
   不加len代表一直到字符串末尾
   //erase字符串用法
            int pos=t.find("AB")
            if(pos!=-1){
                t.erase(t.begin()+pos,t.begin()+pos+2);
                flag=true;
            }



//LC 899
同构字符串的最小字典序存在O（n）求法，叫最小表示法


字符串匹配各种数组 ：
    
 //Z函数（扩展KMP） ：
    返回vector,其中z[i]表示s[0,n-1]与s[i,n-1]的最长公共前缀的长度，z[0]=0
 vector<int> z_function(string s) {
  int n = (int)s.length();
  vector<int> z(n);
  for (int i = 1, l = 0, r = 0; i < n; ++i) {
    if (i <= r && z[i - l] < r - i + 1) {
      z[i] = z[i - l];
    } else {
      z[i] = max(0, r - i + 1);
      while (i + z[i] < n && s[z[i]] == s[i + z[i]]) ++z[i];
    }
    if (i + z[i] - 1 > r) l = i, r = i + z[i] - 1;
  }
  return z;
}
//前缀函数（KMP） ：真前缀与真后缀的最大匹配长度
vector<int> prefix_function(string s) {
  int n = (int)s.length();
  vector<int> pi(n);
  for (int i = 1; i < n; i++) {
    int j = pi[i - 1];
    while (j > 0 && s[i] != s[j]) j = pi[j - 1];
    if (s[i] == s[j]) j++;
    pi[i] = j;
  }
  return pi;
}
//最长公共子序列并求出这个子序列,lc1092
借助b[n][m]来标记
