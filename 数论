//线性筛
const int N=1e5+7;
int pri[N/5];
bool nonpri[N];
long long cnt=0,num[N];
int init = [](){
    for(int i=2;i<N;i++){
		if(nonpri[i]) continue;
		pri[cnt++]=i;
		for(long long j=1ll*i*i;j<1ll*N;j+=i){
			nonpri[j]=1;
		}
	}
    return 0;
}();

//
const int MOD = 1e9 + 7, MX = 1e4 + 1, MX_K = 13; // 至多 13 个质因数
vector<int> ks[MX]; // ks[x] 为 x 分解质因数后，每个质因数的个数列表
int c[MX + MX_K][MX_K + 1]; // 组合数


Python
MX = 1000
P = [0]  # 哨兵，避免二分越界
is_prime = [True] * MX
for i in range(2, MX):
    if is_prime[i]:
        P.append(i)  # 预处理质数列表
        for j in range(i * i, MX, i):
            is_prime[j] = False

//质数筛选及组合数
const int MOD = 1e9 + 7, MX = 1e4 + 1, MX_K = 13; // 至多 13 个质因数
vector<int> ks[MX]; // ks[x] 为 x 分解质因数后，每个质因数的个数列表
int c[MX + MX_K][MX_K + 1]; // 组合数

int init = []() {
    for (int i = 2; i < MX; ++i) {
        int x = i;
        for (int p = 2; p * p <= x; ++p) {
            if (x % p == 0) {
                int k = 1;
                for (x /= p; x % p == 0; x /= p) ++k;
                ks[i].push_back(k);
            }
        }
        if (x > 1) ks[i].push_back(1);
    }

    c[0][0] = 1;
    for (int i = 1; i < MX + MX_K; ++i) {
        c[i][0] = 1;
        for (int j = 1; j <= min(i, MX_K); ++j)
            c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
    }
    return 0;
}();

class Solution {
public:
    int idealArrays(int n, int maxValue) {
        long ans = 0L;
        for (int x = 1; x <= maxValue; ++x) {
            long mul = 1L;
            for (int k: ks[x]) mul = mul * c[n + k - 1][k] % MOD;
            ans += mul;
        }
        return ans % MOD;
    }
};

//快速幂
  const int mod = 1e9 + 7;
  long long fpow(long long a, long long b) {
    long long ans = 1;
    while (b) {//循环终止条件
      if (b & 1) ans = ((ans % mod) * (a % mod)) % mod;//指数为奇数
      b >>= 1;
      a = (a % mod) * (a % mod);
    }
    return ans % mod;
  }
 //快速幂2
 int qmi(int a, int k, int p) //快速幂模板
{
	int res = 1;
	while (k)
	{
		if (k & 1) res = (long long)res * a % p;
		a = (long long)a * a % p;
		k >>= 1;
	}
	return res % p;
}
//数组求逆元
long long fact[N];
long long infact[N];
void ini(){
	// fact为阶乘 infact为阶乘的逆元
    fact[0] = infact[0] = 1;
for (int i = 1; i < N; i ++ )
{
    fact[i] = 1ll*fact[i - 1] * i % mod;
    infact[i] = 1ll*infact[i - 1] * qmi(i, mod - 2, mod) % mod;
}
}
//组合数
c(n,m)=fact[n]*infact[n-m]*infact[m]
