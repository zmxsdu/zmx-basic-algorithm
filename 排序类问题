一.对priority_queue< pair<int,int> > pq; 的排序

leetcode 373 查找和最小的 K 对数字
https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/
        auto cmp = [&nums1, &nums2](const pair<int, int> & a, const pair<int, int> & b) {
            return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];  //最小的在顶部，换成“<”后最大的在顶部
        };
后续写做  priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);


二.利用结构体排序
https://leetcode-cn.com/problems/k-highest-ranked-items-within-a-price-range/submissions/
2146. 价格范围内最高排名的 K 样物品

    struct node{
        int dis,row,column,price;
        bool operator < (node &b) {
            if(dis!=b.dis) return dis<b.dis;
            if(price!=b.price) return price<b.price;
            if(row!=b.row) return row<b.row;
            return column<b.column;
        }
    };
    vector<node> a;
    sort(a.begin(),a.end());
在类定义运算符时自带一个

leetcode 432. 全 O(1) 的数据结构
https://leetcode-cn.com/problems/all-oone-data-structure/
插入元素为结构体时重载运算符
    typedef struct st{
        string s;
        int cnt;
        /*bool operator < (st &b) {
            return cnt < b.cnt ; 
        }*/
        friend bool operator<(const st &a, const st &b) {
            if(a.cnt == b.cnt) {
                return a.s < b.s;
            }
            return a.cnt < b.cnt;
        }
    }st;
 三.对set <pii> 二分
    leetcode 2213. 由单个字符重复的最长子字符串  
    单点修改整合新区间
    https://leetcode-cn.com/problems/longest-substring-of-one-repeating-character/

    //ms记录长度，sp记录区间起始点
    multiset<int> ms,set<pair<int, int>> sp;
    //寻找首元素小于等于p的最大元素
    auto pr = *prev(sp.upper_bound(make_pair(p, n)));（（p,n）一定大于（p,未知），固向前一个即找到）
    auto 找到的pr是一个具体元素（因为加了*）
    //删除单一长度
     ms.erase(ms.find(pr.second-pr.first+1));
     如果不find一下，会删除全部同样大小的元素
四.数组二分查找元素
int pos = upper_bound(nums.begin(), nums.end(), maxValue) - nums.begin() - 1; //返回元素所在数组位置
